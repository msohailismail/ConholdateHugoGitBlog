<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Export rows and columns data to Excel on Conholdate.Total</title>
    <link>/tags/export-rows-and-columns-data-to-excel/</link>
    <description>Recent content in Export rows and columns data to Excel on Conholdate.Total</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Aug 2021 03:06:50 +0000</lastBuildDate><atom:link href="/tags/export-rows-and-columns-data-to-excel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Export Data to Excel in Java</title>
      <link>/2021/08/27/export-data-to-excel-in-java/</link>
      <pubDate>Fri, 27 Aug 2021 03:06:50 +0000</pubDate>
      
      <guid>/2021/08/27/export-data-to-excel-in-java/</guid>
      <description>As a Java developer, you can easily export data from Arrays, Collection of Objects, JSON, or CSV to Excel programmatically. In this article, you will learn&lt;!-- raw HTML omitted --&gt; how to export data to Excel using Java&lt;!-- raw HTML omitted --&gt;.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<p>You can easily export data to Microsoft Excel from various available sources such as JSON, and CSV. As a Java developer, you can export data from Arrays, List of objects, JSON, and CSV to Excel documents programmatically. In this article, you will learn <strong>how to export data to Excel using Java</strong>.</p>
<p>The following topics are discussed/covered in this article:</p>
<ul>
<li><a href="#Java-API-for-Exporting-Data">Java API to Export Data</a></li>
<li><a href="#Export-Array-to-Excel-in-Java">Export Array to Excel in Java</a></li>
<li><a href="#Export-Two-Dimensional-Array-to-Excel">Export Two Dimensional Array to Excel</a></li>
<li><a href="#Export-ArrayList-to-Excel-in-Java">ArrayList to Excel in Java</a></li>
<li><a href="#Export-Collection-of-Custom-Objects-to-Excel-in-Java">Export Collection of Custom Objects to Excel in Java</a></li>
<li><a href="#Export-Data-to-Excel-with-Merged-Cells-in-Java">Export Data to Excel with Merged Cells in Java</a></li>
<li><a href="#Copy-Rows-and-Columns-from-one-Excel-file-to-Another-in-Java">Copy Rows and Columns from one Excel file to Another in Java</a></li>
<li><a href="#Export-JSON-Data-to-Excel-in-Java">Export JSON Data to Excel in Java</a></li>
<li><a href="#Export-CSV-Data-to-Excel-in-Java">Get CSV Data in Excel using Java</a></li>
</ul>
<h2 id="Java-API-for-Exporting-Data">Java API to Export Data</h2>
<p>For exporting data to Excel, I will be using <a href="https://products.aspose.com/cells/java/">Aspose.Cells for Java API</a>. It is a powerful spreadsheet manipulation API that lets you create, edit, or convert Excel files within Java applications. The API enables you to perform Excel automation features programmatically without needing a Microsoft Excel application.</p>
<p>You can <a href="https://downloads.aspose.com/cells/java">download</a> the JAR of the API or just add the following <strong><em>pom.xml</em></strong> configuration in your Maven-based Java application to try the below-mentioned code examples.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="Export-Array-to-Excel-in-Java">Export Array to Excel in Java</h2>
<p>You can easily export data from a one-dimensional array or a two-dimensional array to an Excel document. The array can be of a reference type or a value type. You can export data from an array to Excel by following the simple steps mentioned below:</p>
<ul>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class</li>
<li>Get worksheet in an instance of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet"><em>Worksheet</em></a> class</li>
<li>Create an array containing string values</li>
<li>Call the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importArray(java.lang.String%5B%5D,%20int,%20int,%20boolean)"><em>importArray()</em></a> method with the array</li>
<li>Save the output file by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class</li>
</ul>
<p>The following code sample shows <strong>how to export an array of strings to Excel using Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-Array-to-Excel-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Export Array to Excel in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a></strong> class of the API is the main class to create an Excel spreadsheet. It provides functionality to open and save native excel files. The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)"><em>save()</em></a></strong> method of this class is used to save the output file at the specified file path.</p>
<p>The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet">Worksheet</a></strong> class represents a single worksheet and provides functionality to work with cells and rows.</p>
<p>The <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importArray(java.lang.String%5B%5D,%20int,%20int,%20boolean)"><em>importArray()</em></a> method of the Cells class exports an array of strings to a worksheet. It takes the following input parameters:</p>
<ul>
<li><em><strong>stringArray</strong></em>: The array of String values</li>
<li><em><strong>firstRow</strong></em>: The row number of the first cell to export to</li>
<li><em><strong>firstColumn</strong></em>: The column number of the first cell to export to</li>
<li><em><strong>isVertical</strong></em>: It specifies whether to export data vertically or horizontally</li>
</ul>
<p>The API also provides the overloaded versions of the <em><strong>importArray()</strong></em> method to export an array of integer or double to a worksheet.</p>
<h2 id="Export-Two-Dimensional-Array-to-Excel">Export Two Dimensional Array to Excel</h2>
<p>Similarly, you can export a <strong>two-dimensional array to an Excel file</strong>. The following code sample shows <strong>how to export a two-dimensional array to an Excel file in Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-Two-Dimensional-Array-to-Excel.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Export Two Dimensional Array to Excel<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The Cells class provides <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importArray(int%5B%5D%5B%5D,%20int,%20int)">importArray()</a></strong> method to export a two-dimension array of integers to a worksheet. The API also provides the overloaded versions of this method to export a two-dimensional array of strings or double into a worksheet.</p>
<h2 id="Export-ArrayList-to-Excel-in-Java">Export ArrayList to Excel in Java</h2>
<p>You can export data from an ArrayList to Excel by following the steps mentioned below:</p>
<ul>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class</li>
<li>Get worksheet in an instance of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet"><em>Worksheet</em></a> class</li>
<li>Create an array list containing string values</li>
<li>Call the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importArrayList(java.util.ArrayList,%20int,%20int,%20boolean)"><em>importArrayList()</em></a> method with the array list</li>
<li>Save the output file by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class</li>
</ul>
<p>The following code sample shows <strong>how to export an ArrayList to Excel in</strong> <strong>Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-ArrayList-to-Excel-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Export ArrayList to Excel in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importArrayList(java.util.ArrayList,%20int,%20int,%20boolean)"><strong><em>importArrayList()</em></strong></a> method of the Cells class exports an ArrayList of data to a worksheet. It takes four parameters including the ArrayList of data. The other parameters are the <em>firstRow</em>, <em>firstColumn</em>, and <em>isVertical</em>.</p>
<h2 id="Export-Collection-of-Custom-Objects-to-Excel-in-Java">Export Collection of Custom Objects to Excel in Java</h2>
<p>You can export data from a collection of custom objects to Excel by following the steps mentioned below:</p>
<ul>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class</li>
<li>Get worksheet in an instance of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet"><em>Worksheet</em></a> class</li>
<li>Create an array list of custom objects</li>
<li>Call the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importCustomObjects(java.util.Collection,%20java.lang.String%5B%5D,%20boolean,%20int,%20int,%20int,%20boolean,%20java.lang.String,%20boolean)"><em>importCustomObjects()</em></a> method with the array list</li>
<li>Save the output file by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class</li>
</ul>
<p>The following code sample shows <strong>how to export a collection of custom objects to Excel in Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-Collection-of-Custom-Objects-to-Excel-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Collection of Custom Objects to Excel in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importCustomObjects(java.util.Collection,%20java.lang.String%5B%5D,%20boolean,%20int,%20int,%20int,%20boolean,%20java.lang.String,%20boolean)"></a><strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importCustomObjects(java.util.Collection,%20java.lang.String%5B%5D,%20boolean,%20int,%20int,%20int,%20boolean,%20java.lang.String,%20boolean)"><em>importCustomObjects</em></a>()</strong> method of the Cells class exports a list of custom objects and takes the following parameters. The API also provides the overloaded version of this method that takes fewer parameters.</p>
<ul>
<li><em><strong>list</strong></em>: The collection of custom objects</li>
<li><strong><em>propertName</em></strong>: Specify name for a specific property to export. If it is null, it will export all properties of the object</li>
<li><strong><em>isPropertyNameShown</em></strong>: Indicates whether the property name will be exported to the first row</li>
<li><strong><em>firstRow</em></strong>: The row number of the first cell to export</li>
<li><strong><em>firstColumn</em></strong>: The column number of the first cell to export</li>
<li><strong><em>rowNumber</em></strong>: Number of rows to be exported</li>
<li><strong><em>insertRows</em></strong>: Indicates whether extra rows are added to fit data</li>
<li><strong><em>dataFormatString</em></strong>: Date format string for cells</li>
<li><strong><em>convertStringToNumber</em></strong>: Indicates if this method will try to convert string to number.</li>
</ul>
<h2 id="Export-Data-to-Excel-with-Merged-Cells-in-Java">Export Data to Excel with Merged Cells in Java</h2>
<p>You can export data from a collection of objects to a worksheet containing merged cells by following the steps mentioned below:</p>
<ul>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class with template file path</li>
<li>Get worksheet in an instance of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet"><em>Worksheet</em></a> class</li>
<li>Create an array list of objects</li>
<li>Create an instance of the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/ImportTableOptions">ImportTableOptions</a></em> class</li>
<li>Call the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#importCustomObjects(java.util.Collection,%20java.lang.String%5B%5D,%20boolean,%20int,%20int,%20int,%20boolean,%20java.lang.String,%20boolean)"><em>importCustomObjects()</em></a> method with the array list</li>
<li>Save the output file by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class</li>
</ul>
<p>The following code sample shows how to export a collection of custom objects to an <strong>Excel worksheet with merged cells in Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-Data-to-Excel-with-Merged-Cells-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Export Data to Excel with Merged Cells in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/ImportTableOptions">ImportTableOptions</a></strong> class provides several options for exporting data into cells. The <strong><em>setCheckMergedCells</em></strong> indicates whether checking merged cells. The <strong><em>setFieldNameShown</em></strong> property indicates whether the field name should be exported or not.</p>
<h2 id="Copy-Rows-and-Columns-from-one-Excel-file-to-Another-in-Java">Copy Rows and Columns from one Excel file to Another in Java</h2>
<p>You can easily copy rows and columns from one Excel file to another file programmatically by following the steps mentioned below:</p>
<ul>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class with source workbook input file</li>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class for destination workbook</li>
<li>Get source and destination worksheets in seperate instances of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet"><em>Worksheet</em></a> class</li>
<li>Call the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#copyRows(com.aspose.cells.Cells,%20int,%20int,%20int)">copyRows()</a></em> method of the destination worksheet with the source worksheet cells</li>
<li>Save the destination workbook output file by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class</li>
</ul>
<p>The following code sample shows <strong>how to copy rows and columns from one Excel file to another using Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Copy-Rows-and-Columns-from-one-Excel-file-to-Another-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Copy Rows and Columns from one Excel file to Another in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>You can copy specific rows from one Excel file to another. The following code sample shows <strong>how to copy specific rows from one Excel file to another using Java</strong>.</p>
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Copy-Specific-Rows-and-Columns-from-one-Excel-file-to-Another-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Copy Specific Rows and Columns from one Excel file to Another in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <strong><em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#copyRows(com.aspose.cells.Cells,%20int,%20int,%20int)">copyRows()</a></em></strong> method copies data and formats of whole rows. It takes the source worksheet cells to copy as input parameters along with the source row index, destination row index, and the copied row number. The API also provides the overloaded versions of this method to copy rows with <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/CopyOptions">CopyOptions</a> and <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/PasteOptions">PasteOptions</a>.</p>
<p>Similarly, You can copy columns data from one Microsoft Excel document to another using the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cells#copyColumn(com.aspose.cells.Cells,%20int,%20int)">copyColumn()</a> or <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copycolumns">copyColumns()</a> methods.</p>
<h2 id="Export-JSON-Data-to-Excel-in-Java">Export JSON Data to Excel in Java</h2>
<p>You can easily export data from a JSON file to Excel by following the steps mentioned below:</p>
<ul>
<li>Create an instance of the _<a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a> _class</li>
<li>Get worksheet in an instance of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Worksheet"><em>Worksheet</em></a> class</li>
<li>Read the JSON file</li>
<li>Create an instance of the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/CellsFactory">CellsFactory</a></em> class</li>
<li>Initiate style by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cellsfactory#createStyle()">createStyle()</a></em> method</li>
<li>Set various style properties such as Horizontal Alignment, Font color, etc.</li>
<li>Create an instance of the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/JsonLayoutOptions">JsonLayoutOptions</a> class</li>
<li>Set title style with the style object</li>
<li>Set array as table property to true</li>
<li>Call the <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/jsonutility#importData(java.lang.String,%20com.aspose.cells.Cells,%20int,%20int,%20com.aspose.cells.JsonLayoutOptions)"><em>JsonUtility.importData()</em></a> method with the JSON input and <em>JsonLayoutOptions</em></li>
<li>Save the output file by calling the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class</li>
</ul>
<p>The following code sample shows <strong>how to export data from a JSON file to Excel using Java</strong>.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-JSON-Data-to-Excel-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Export JSON Data to Excel in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/CellsFactory">CellsFactory</a></strong> class instantiates classes of Cells model. The <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/cellsfactory#createStyle()"><strong>createStyle()</strong></a></em> method of this class creates a new style object of the <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Style">Style</a></strong> class. The <strong>Style</strong> class allows setting display style of Excel document, such as font, color, alignment, border, etc.</p>
<p>The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/JsonLayoutOptions">JsonLayoutOptions</a></strong> class provides the options of JSON layout type. The <strong><em>setTitleStyle</em></strong> method of this class is used to set the defined style of the title. The <strong><em>setArrayAsTable</em></strong> method allows processing Array as a table.</p>
<p>The API provides <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/jsonutility">JsonUtility</a></strong> class to process the JSON. The <a href="https://apireference.aspose.com/cells/java/com.aspose.cells/jsonutility#importData(java.lang.String,%20com.aspose.cells.Cells,%20int,%20int,%20com.aspose.cells.JsonLayoutOptions)"><em><strong>importData()</strong></em></a> method of this class exports the JSON string and takes the following parameters:</p>
<ul>
<li><strong><em>json</em></strong>: The JSON string</li>
<li><strong><em>cells</em></strong>: The Cells</li>
<li><strong><em>row</em></strong>: The row index</li>
<li><strong><em>column</em></strong>: The column index</li>
<li><strong><em>option</em></strong>: The options to export JSON string</li>
</ul>
<h2 id="Export-CSV-Data-to-Excel-in-Java">Get CSV Data in Excel using Java</h2>
<p>You can export data from a CSV file to Excel by following the simple steps mentioned below:</p>
<ul>
<li>Create an instance of the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/LoadOptions">LoadOptions</a></em> class wih <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/LoadFormat">LoadFormat</a></em></li>
<li>Create an instance of the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/Workbook">Workbook</a></em> class with CSV file path and <em>LoadOptions</em> object</li>
<li>Call the <em><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/workbook#save(java.lang.String)">save()</a></em> method of the <em>Workbook</em> class and save the output file</li>
</ul>
<p>The following code sample shows <strong>how to export data from a CSV file to Excel using Java</strong>.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><a href="https://blog.conholdate.com/wp-content/uploads/sites/27/2021/08/Export-CSV-Data-to-Excel-in-Java.jpg"><!-- raw HTML omitted --></a><!-- raw HTML omitted -->Export CSV Data to Excel in Java<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/LoadOptions">LoadOptions</a></strong> class of the API provides options for loading the file. The <strong><a href="https://apireference.aspose.com/cells/java/com.aspose.cells/LoadFormat">LoadFormat</a></strong> class contains constants representing the load file formats.</p>
<h2 id="get-a-free-license">Get a Free License</h2>
<p>You can try the API without evaluation limitations by requesting <a href="https://purchase.aspose.com/temporary-license">a free temporary license</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, you have learned <strong>how to export data to Excel in Java</strong>. You have also learned <strong>how to export data from Arrays, JSON, or CSV files to Excel</strong> programmatically. Moreover, you have learned <strong>how to copy rows and columns from one Excel file to another file using Java</strong>. You can learn more about Aspose.Cells for Java API using the <a href="https://docs.aspose.com/cells/java/">documentation</a>. In case of any ambiguity, please feel free to contact us on the <a href="https://forum.aspose.com/c/cells/9">forum</a>.</p>
<h2 id="see-also">See Also</h2>
<ul>
<li><a href="https://blog.aspose.com/2021/06/15/copy-rows-and-columns-in-excel-using-java/">Copy Rows and Columns in Excel using Java</a></li>
</ul>
<h2 id="frequently-asked-questions">Frequently Asked Questions</h2>
<!-- raw HTML omitted -->
<pre><code>&lt;p class=&quot;schema-faq-answer&quot;&gt;
  You can easily export data from Arrays, Collection of Objects, JSON, and CSV to an XLSX file using easy-to-integrate Aspose.Cells for Java API in your Java application.
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;p class=&quot;schema-faq-answer&quot;&gt;
  Aspose.Cells API provides JsonUtility to export data from a JSON file to Excel in Java. You can find simple steps under the &lt;a href=&quot;#Export-JSON-Data-to-Excel-in-Java&quot;&gt;&amp;#8220;Export JSON Data to Excel in Java&amp;#8221;&lt;/a&gt; section.
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;p class=&quot;schema-faq-answer&quot;&gt;
  You can simply load a CSV file and save it as XLSX using Aspose.Cells API. You can find simple steps under the &lt;a href=&quot;#Export-CSV-Data-to-Excel-in-Java&quot;&gt;&amp;#8220;Get CSV Data in Excel using Java&amp;#8221;&lt;/a&gt; section.
</code></pre>
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    
    <item>
      <title>Export Data to Excel in C#</title>
      <link>/2020/08/10/export-data-to-excel-in-csharp/</link>
      <pubDate>Mon, 10 Aug 2020 08:43:31 +0000</pubDate>
      
      <guid>/2020/08/10/export-data-to-excel-in-csharp/</guid>
      <description>In this article, I will show you how to export data to Excel in C# and VB.NET from various data sources such as an array, collection of custom objects, DataTable, DataView, DataGrid, GridView, HTML, JSON and CSV.
 Export Array to Excel in C#  Export ArrayList to Excel Export Collection of Custom Objects to Excel   Copy Rows and Columns from one Excel file to Another Export DataTable to Excel in C#  Export Data of Selective DataColumns to Excel Export DataView to Excel   Export Data from DataGrid and GridView to Excel Export HTML formatted Data to Excel  Export HTML File to Excel   Export JSON Data to Excel in C# Export CSV Data to Excel in C#  Export Data to Excel in C# with Aspose.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<p>In this article, I will show you how to export data to Excel in C# and VB.NET from various data sources such as an array, collection of custom objects, DataTable, DataView, DataGrid, GridView, HTML, JSON and CSV.</p>
<ul>
<li><a href="#Export-from-Array-to-Excel">Export Array to Excel in C#</a>
<ul>
<li><a href="#Export-from-ArrayList-to-Excel">Export ArrayList to Excel</a></li>
<li><a href="#Export-from-Collection-of-Custom-Objects">Export Collection of Custom Objects to Excel</a></li>
</ul>
</li>
<li><a href="#Copy-Rows-and-Columns">Copy Rows and Columns from one Excel file to Another</a></li>
<li><a href="#Export-from-DataTable-to-Excel">Export DataTable to Excel in C#</a>
<ul>
<li><a href="#Export-Data-of-Selective-DataColumns">Export Data of Selective DataColumns to Excel</a></li>
<li><a href="#Export-Data-from-DataView-to-Excel">Export DataView to Excel</a></li>
</ul>
</li>
<li><a href="#Export-Data-from-DataGrid-and-GridView">Export Data from DataGrid and GridView to Excel</a></li>
<li><a href="#Export-HTML-formatted-Data-to-Excel">Export HTML formatted Data to Excel</a>
<ul>
<li><a href="#Export-HTML-File-to-Excel">Export HTML File to Excel</a></li>
</ul>
</li>
<li><a href="#Export-JSON-Data-to-Excel">Export JSON Data to Excel in C#</a></li>
<li><a href="#Export-CSV-Data-to-Excel">Export CSV Data to Excel in C#</a></li>
</ul>
<h2 id="export-data-to-excel-in-c-with-asposecells-api">Export Data to Excel in C# with Aspose.Cells API</h2>
<p><a href="https://products.aspose.com/cells/net">Aspose.Cells for .NET</a> is a powerful spreadsheet manipulation API that lets you create, edit, or convert Excel files within .NET applications. The API’s easy to use methods enable you to perform Excel automation features seamlessly in a few lines of code. <strong>NuGet</strong> is the easiest way to download and install <a href="https://www.nuget.org/packages/Aspose.Cells/">Aspose.Cells API for .NET</a>. Open <strong>Manage NuGet Packages</strong> window and type “Aspose.Cells” in the search text box to find the <strong>Aspose.Cells</strong> .NET package. Finally, click the <strong>Install</strong> button to install the latest version of the package.</p>
<h2 id="Export-from-Array-to-Excel">Export Array to Excel in C#</h2>
<p>We can export an array (one-dimensional or two-dimensional) of a reference type or value type to an Excel document. We use the <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importarray/index">ImportArray</a> method of the <a href="https://apireference.aspose.com/net/cells/aspose.cells/worksheet/properties/cells">Cells</a> collection to export data to a spreadsheet from an array. The overloaded versions of the <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importarray/index">ImportArray</a> method are the following.<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  &lt;strong&gt;Description&lt;/strong&gt;
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  Exports an array of double into a worksheet.
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  Exports an array of an integer into a worksheet.
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  Exports an array of string into a worksheet.
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  Exports a two-dimensional array of double into a worksheet.
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  Exports a two-dimensional array of an integer into a worksheet.
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<pre><code>&lt;td&gt;
  Exports a two-dimensional array of string into a worksheet.
&lt;/td&gt;
</code></pre>
<!-- raw HTML omitted -->
<p>A typical overload takes the following parameters:</p>
<ul>
<li><strong>Array</strong>, the array object that you are exporting content from.</li>
<li><strong>Row number</strong>, the row number of the first cell (zero-based) that the data will be exported to.</li>
<li><strong>Column number</strong>, the column number of the first cell (zero-based) that the data will be exported to.</li>
<li><strong>Is vertical</strong>, a Boolean value that specifies whether to export data vertically or horizontally.</li>
</ul>
<p>The following are the steps to export an array to Excel file in C#.</p>
<ul>
<li>Create a <a href="https://apireference.aspose.com/net/cells/aspose.cells/workbook">Workbook</a> object. A <a href="https://apireference.aspose.com/net/cells/aspose.cells/workbook">Workbook</a> class represents a Microsoft Excel file.</li>
<li>Get a reference to the desired worksheet. The <a href="https://apireference.aspose.com/net/cells/aspose.cells/workbook">Workbook</a> class contains a <a href="https://apireference.aspose.com/net/cells/aspose.cells/workbook/properties/worksheets">Worksheets</a> collection that allows access to each worksheet in an Excel file.</li>
<li>Call <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/importarray/index">ImportArray</a> method of a <a href="https://apireference.aspose.com/net/cells/aspose.cells/worksheet/properties/cells">Cells</a> collection to export an array to the worksheet at the specified row and column. The <a href="https://apireference.aspose.com/net/cells/aspose.cells/worksheet">Worksheet</a> class provides a <a href="https://apireference.aspose.com/net/cells/aspose.cells/worksheet/properties/cells">Cells</a> collection.</li>
<li>Save the Excel file using <a href="https://apireference.aspose.com/net/cells/aspose.cells.workbook/save/methods/2">Workbook.Save(string)</a> method.</li>
</ul>
<p>The following code sample shows how to export an array of String to an Excel file in C#.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->Export an array of data to Excel<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>Similarly, we can export a <strong>two-dimensional array to an Excel file</strong>. The following code sample shows how to export two-dimensional array to an Excel file in C#.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="Export-from-ArrayList-to-Excel">Export ArrayList to Excel in C#</h3>
<p>To export data from an ArrayList_ _to worksheet, call the <a href="https://apireference.aspose.com/net/cells/aspose.cells/worksheet/properties/cells">Cells</a> collection’s <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importarraylist">ImportArrayList</a> method. The <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importarraylist">ImportArrayList</a> method takes the following parameters:</p>
<ul>
<li><strong>Array list</strong> represents the ArrayList object you are exporting.</li>
<li><strong>Row</strong> <strong>number</strong> represents the row number of the first cell that the data will be exported to.</li>
<li><strong>Column number</strong> represents the column number of the first cell that the data will be exported to.</li>
<li><strong>Is vertical</strong> a Boolean value that specifies whether to export data vertically or horizontally.</li>
</ul>
<p>The following code sample shows how to export an ArrayList to an Excel file in C#.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="Export-from-Collection-of-Custom-Objects">Export Collection of Custom Objects to Excel in C#</h3>
<p>To export data from a collection of custom objects to a worksheet, we use <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importcustomobjects/index">ImportCustomObjects</a> method. There are two overloaded versions of this method.</p>
<ol>
<li><a href="https://apireference.aspose.com/cells/net/aspose.cells.cells/importcustomobjects/methods/1">ImportCustomObjects(ICollection list, String[] propertyNames, Boolean isPropertyNameShown, Int32 firstRow, Int32 firstColumn, Int32 rowNumber, Boolean insertions, String dateFormatString, Boolean convertStringToNumber)</a></li>
<li><a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/importcustomobjects">ImportCustomObjects(ICollection list, Int32 firstRow, Int32 firstColumn, ImportTableOptions options)</a></li>
</ol>
<p>We will explore each overloaded method one by one. The description of the parameters of the first overloaded method is given below:</p>
<ul>
<li><strong>list</strong> The collection of the custom objects.</li>
<li><strong>propertyNames</strong> Names of properties of the object to export. If it is null, all properties will be exported.</li>
<li><strong>isPropertyNameShown</strong> Indicates whether the property names will be exported to the first row.</li>
<li><strong>firstRow</strong> The row number of the first cell to export to.</li>
<li><strong>firstColumn</strong> The column number of the first cell to export to.</li>
<li><strong>rowNumber</strong> Number of objects to be exported.</li>
<li><strong>insertRows</strong> Indicates whether extra rows are added to fit data.</li>
<li><strong>dateFormatString</strong> Date format string for cells.</li>
<li><strong>convertStringToNumber</strong> Indicates if this method will try to convert string to a number.</li>
</ul>
<p>In the following example, we are exporting a list of <em>Person</em> objects to an Excel document in C#. Please note that we are exporting only two properties (<em>Name</em> and <em>Age</em>) of a <em>Person</em> object.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->Export a list of Person objects to Excel<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>Now we explore the second overloaded method of <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importcustomobjects/index">ImportCustomObjects</a>. The description of the parameters of the method is given below:</p>
<ul>
<li><strong>list</strong> The list of custom objects.</li>
<li><strong>firstRow</strong> The row number of the first cell to export to.</li>
<li><strong>firstColumn</strong> The column number of the first cell to export to.</li>
<li><strong>options</strong> <a href="https://apireference.aspose.com/cells/net/aspose.cells/importtableoptions">ImportTableOptions</a> object.</li>
</ul>
<p>The <a href="https://apireference.aspose.com/cells/net/aspose.cells/importtableoptions">ImportTableOptions</a> parameter provides several options for exporting data into cells. Some of them are given below:</p>
<ul>
<li><strong>CheckMergedCells</strong> Does an Excel document contain merged cells.</li>
<li><strong>ColumnIndexes</strong> Integer array of column indexes (0-based) to export from the data source. <em>null</em> means all columns should be exported.</li>
<li><strong>ConvertGridStyle</strong> Indicates whether to apply the style of the grid view to cells.</li>
<li><strong>ConvertNumericData</strong> A boolean value that indicates whether the string value should be converted to numeric or date value.</li>
<li><strong>DateFormat</strong> Gets or sets date format string for cells with exported DateTime values.</li>
<li><strong>DefaultValues</strong> Default value for the cell in the table is null.</li>
<li><strong>InsertRows</strong> Indicates whether new rows should be added for exporting data records.</li>
<li><strong>IsFieldNameShown</strong> Indicates whether the field names should be exported.</li>
<li><strong>IsFormulas</strong> Indicates whether the data are formulas.</li>
<li><strong>IsHtmlString</strong> Indicates whether the data contains HTML tags. If we set the value to true, HTML formatting will remain preserved while exporting data to an Excel document.</li>
<li><strong>NumberFormats</strong> Gets or sets the number formats</li>
<li><strong>ShiftFirstRowDown</strong> Indicates whether the first row should be shifted down when inserting rows.</li>
<li><strong>TotalColumns</strong> Gets or sets total columns’ count to export from a data source. -1 means all columns of the given data source.</li>
<li><strong>TotalRows</strong> Gets or sets total rows’ count to export from the data source. -1 means all rows of the given data source.</li>
</ul>
<p>In the following example, we are exporting data from a collection of objects to a worksheet containing merged cells. We are setting the value of <a href="https://apireference.aspose.com/net/cells/aspose.cells/importtableoptions/properties/checkmergedcells">ImportTableOptions.CheckMergedCells</a> property to true as the Excel document contains merged cells.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->Export Data to an Excel Document Containing Merged Cells<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h2 id="Copy-Rows-and-Columns">Copies Rows and Columns from one Excel file to Another in C#</h2>
<p>We can programmatically copy rows and columns from one Excel document to another. When a row (or column) is copied, the data contained in it, including formulas – with updated references – and values, comments, formatting, hidden cells, images, and other drawing objects are also copied. We can also copy rows and columns within the same worksheet or across different worksheets in an Excel document. Aspose.Cells provides the following methods to copy rows and columns.</p>
<ul>
<li><a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copyrow">CopyRow(Cells sourceCells, int sourceRowIndex, int destinationRowIndex)</a> Copies data of a single row.</li>
<li><a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copyrows">CopyRows(Cells sourceCells, int sourceRowIndex, int destinationRowIndex, int rowNumber)</a> Copies data of multiple rows.</li>
<li><a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copycolumn">CopyColumn(Cells sourceCells, int sourceColumnIndex, int destinationColumnIndex)</a> Copies data of a single column.</li>
<li><a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copycolumns">CopyColumns(Cells sourceCells, int sourceColumnIndex, int destinationColumnIndex, int columnNumber)</a> Copies data of multiple columns.</li>
</ul>
<p>The following example code shows how to copy rows from one Excel document to another in C#.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>The following example code shows how to copy specific rows of one Excel document to another.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted --></p>
<p>We can similarly copy columns’ data from one Microsoft Excel document to another using <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copycolumn">CopyColumn</a> or <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/copycolumns">CopyColumns</a> method.</p>
<h2 id="Export-from-DataTable-to-Excel">Export DataTable to Excel in C#</h2>
<p>Data from ADO.NET objects such as <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataset-datatable-dataview/datatables">DataTable</a>, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datacolumn?view=netcore-3.1">DataColumn</a>, and <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataset-datatable-dataview/dataviews">DataView</a> can be exported to Excel worksheets. To export data from a DataTable, we call the <a href="https://apireference.aspose.com/cells/net/aspose.cells.cells/importdata/methods/1">ImportData</a> method of Cells collection. There are many overloaded versions of the <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/importdata/index">ImportData</a> method but we use the following:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>The description of the parameters is given below:</p>
<ul>
<li><strong>table</strong> The <!-- raw HTML omitted -->DataTable<!-- raw HTML omitted --> object to be exported.</li>
<li><strong>firstRow</strong> The row number of the first cell to export to.</li>
<li><strong>firstColumn</strong> The column number of the first cell to export to.</li>
<li><strong>optionsType</strong> <a href="https://apireference.aspose.com/cells/net/aspose.cells/importtableoptions">ImportTableOptions</a> object.</li>
</ul>
<p>In the following code sample, we are creating a DataTable object that has three columns and two rows. And exporting it to an Excel worksheet.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->Export DataTable to Excel<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h3 id="Export-Data-of-Selective-DataColumns">Export Data of Selective DataColumns to Excel in C#</h3>
<p>We can export selective DataColumns of a DataTable or DataView to an Excel document. As discussed earlier, the <a href="https://apireference.aspose.com/cells/net/aspose.cells.cells/importdata/methods/1">ImportData</a> method accepts an argument of type <a href="https://apireference.aspose.com/net/cells/aspose.cells/importtableoptions">ImportTableOptions</a>. The <a href="https://apireference.aspose.com/net/cells/aspose.cells/importtableoptions">ImportTableOptions</a> class has a <a href="https://apireference.aspose.com/net/cells/aspose.cells/importtableoptions/properties/columnindexes">ColumnIndexes</a> property that accepts an array of columns indexes (zero-based) that we want to export. In the following code sample, we are exporting only two DataColumns of a DataTable to an Excel Worksheet.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted --><em>The output of DataColumns to Excel</em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h3 id="Export-Data-from-DataView-to-Excel">Export Data from DataView to Excel in C#</h3>
<p>A <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.dataview?view=netcore-3.1">DataView</a> is a view on a DataTable that can be customized to present a subset of data from the DataTable. We use the following overloaded version of the <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/importdata/index">ImportData</a> method to export data from DataView to an Excel document.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>We know there are two ways to create a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.dataview">DataView</a>. We can use the <strong>DataView</strong> constructor, or we can create a reference to the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datatable.defaultview">DefaultView</a> property of the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datatable">DataTable</a>. In the following code sample, we are using the later way to create a DataView.</p>
<!-- raw HTML omitted -->
<h2 id="Export-Data-from-DataGrid-and-GridView">Export Data from DataGrid and GridView to Excel in C#</h2>
<p><a href="https://products.aspose.com/cells">Aspose.Cells</a> library allows us to export data from Microsoft Grid controls such as DataGrid and GridView to an Excel worksheet. It provides <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importdatagrid/index">ImportDataGrid</a> method, to export data from a DataGrid and <a href="https://apireference.aspose.com/cells/net/aspose.cells/cells/methods/importgridview">ImportGridView</a> method to export data from a GridView.</p>
<p>There are many overloaded versions of the <a href="https://apireference.aspose.com/net/cells/aspose.cells/cells/methods/importdatagrid/index">ImportDataGrid</a> method but a typical overload takes the following parameters:</p>
<ul>
<li><strong>dataGrid</strong>, the <em>DataGrid</em> object that we’re exporting content from.</li>
<li><strong>firstRow</strong>, the row number of the first cell that the data will be exported to.</li>
<li><strong>firstColumn</strong>, the column number of the first cell that the data will be exported to.</li>
<li><strong>insertRows</strong>, a Boolean property that indicates whether extra rows should be added to the worksheet to fit data.</li>
<li><strong>importStyle</strong>, a Boolean property that indicates whether cell style should be exported.</li>
</ul>
<p>The following code example shows how to export data from DataGrid to an Excel file in C#.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="Export-HTML-formatted-Data-to-Excel">Export HTML formatted Data to Excel in C#</h2>
<p><a href="https://docs.aspose.com/cells/net/">Aspose.Cells</a> lets you export HTML formatted data to an Excel worksheet. The API parses HTML formatted text while exporting data and convert the HTML into formatted cell values. In the following sample code, DataTable contains HTML formatted text and we are exporting it to an Excel Document using <a href="https://apireference.aspose.com/cells/net/aspose.cells.cells/importdata/methods/1">ImportData</a> method.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->The output of HTML Exported Data to an Excel Document<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h3 id="Export-HTML-File-to-Excel">Export HTML File to Excel in C#</h3>
<p>Aspose.Cells allows us to export an HTML file to Excel. The HTML file should be Microsoft Excel oriented, i.e., MS-Excel should be able to open it.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="Export-JSON-Data-to-Excel">Export JSON Data to Excel in C#</h2>
<p>Sometimes we have a need to export JSON Data to an Excel document. With <a href="https://docs.aspose.com/cells/net/">Aspose.Cells</a> we can easily do this with a few lines of code. Aspose.Cells provides a <a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonutility">JsonUtility</a> class that has an <a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonutility/methods/importdata">ImportData</a> method for exporting JSON data to an Excel document. The <a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonutility/methods/importdata">ImportData</a> method accepts <a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions">JsonLayoutOptions</a> object as a parameter. The <a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions">JsonLayoutOptions</a> class represents the options of JSON layout and has the following properties.</p>
<ul>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/arrayastable">ArrayAsTable</a>: Indicates whether the array should be processed as a table.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/convertnumericordate">ConvertNumericOrDate</a>: Gets or sets a value that indicates whether the string in JSON is to be converted to numeric or date.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/dateformat">DateFormat</a>: Gets and sets the format of the date value.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/ignorearraytitle">IgnoreArrayTitle</a>: Indicates whether to ignore the title if the property of the object is an array.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/ignorenull">IgnoreNull</a>: Indicates whether the null value should be ignored.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/ignoreobjecttitle">IgnoreObjectTitle</a>: Indicates whether to ignore the title if the property of the object is an object.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/numberformat">NumberFormat</a>: Gets and sets the format of the numeric value.</li>
<li><a href="https://apireference.aspose.com/net/cells/aspose.cells.utility/jsonlayoutoptions/properties/titlestyle">TitleStyle</a>: Gets and sets the style of the title.</li>
</ul>
<p>In the following example code, we are exporting JSON data to an Excel file in C#.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->Export JSON Data to Excel<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h2 id="Export-CSV-Data-to-Excel">Export CSV Data to Excel in C#</h2>
<p>A comma-separated values (CSV) file is a delimited text file that uses a comma to separate values. A CSV file typically stores tabular data (numbers and text) in plain text, in which case each line will have the same number of fields.</p>
<p>The following code sample shows how we can open a CSV file and save it as an Excel file using Aspose.Cells library.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->CSV to an Excel Document<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post, you have seen how easily you can export data to Excel in C# from Array, DataTable, DataView, DataGrid and GridView. You have also seen how to export HTML, JSON, CSV Data to an Excel worksheet. Please check the <a href="https://docs.aspose.com/cells/net/">documentation</a> to learn more about these and several other features that Aspose.Cells API offers. If you have any questions, please feel free to contact us through our <a href="https://forum.aspose.com/">Support Forum</a>.</p>
<h2 id="see-also">See Also</h2>
<ul>
<li><a href="https://blog.aspose.com/2020/01/21/create-excel-xls-xlsx-programmatically-in-csharp-net/">Create MS Excel Files Programmatically in C# without MS Office</a></li>
<li><a href="https://blog.aspose.com/2020/04/03/import-data-from-json-to-excel-in-csharp-asp.net/">Import Data from JSON to Excel Worksheet in C# .NET</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
